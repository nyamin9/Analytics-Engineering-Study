
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'ae_case_study'  # 프로젝트 이름: 소문자와 언더스코어만 사용 가능
version: '1.0.0'       # 프로젝트 버전: 시맨틱 버전닝 권장

# This setting configures which "profile" dbt uses for this project.
# profile: 데이터베이스 연결 정보가 저장된 프로파일 이름
# profiles.yml 파일에서 해당 이름의 설정을 찾아 연결
profile: 'ae_case_study'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]        # SQL 모델 파일들이 위치한 디렉토리
analysis-paths: ["analyses"]   # 일회성 분석 쿼리들이 위치한 디렉토리
test-paths: ["tests"]          # 커스텀 테스트 파일들이 위치한 디렉토리
seed-paths: ["seeds"]          # CSV 등 정적 데이터 파일들이 위치한 디렉토리
macro-paths: ["macros"]        # 여러 번 재사용 가능한 코드. jinja template으로 작성
snapshot-paths: ["snapshots"]  # SCD Type 2 추적을 위한 스냅샷 파일들이 위치한 디렉토리

clean-targets:         # directories to be removed by `dbt clean`
  - "target"           # dbt 실행 결과물이 저장되는 디렉토리 (컴파일된 SQL, 로그 등)
  - "dbt_packages"     # 외부 패키지들이 설치되는 디렉토리


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  ae_case_study:  # 프로젝트 이름과 동일해야 함
    # Config indicated by + and applies to all files under models/example/
    # https://docs.google.com/spreadsheets/d/1wpLf34IVlvOJdg40jf2559FIzyieShdD3JwOM5hUjIg/edit?gid=1624630520#gid=1624630520
    staging:      # staging 디렉토리 내 모든 모델에 적용되는 설정 (폴더 구조와 동일명)
      +enabled: true           # 모델 활성화 여부: false로 설정하면 해당 모델들이 실행되지 않음
      +materialized: table     # 모델 형식: view, table, incremental 중 선택
      # +materialized: view     # 모델 형식: view, table, incremental 중 선택
                               # - view: 가벼운 쿼리, 자주 변경되는 경우
                               # - table: 무거운 쿼리, 성능이 중요한 경우  
                               # - incremental: 대용량 데이터, 증분 처리 필요한 경우
      +schema: stg_northwind   # 모델 스키마: 데이터베이스에서 생성될 스키마 이름
                               # 데이터 웨어하우스의 논리적 구분을 위해 사용
    warehouse:      # warehouse 디렉토리 내 모든 모델에 적용되는 설정 (폴더 구조와 동일명)
      +enabled: true           # 모델 활성화 여부: false로 설정하면 해당 모델들이 실행되지 않음
      +materialized: table     # 모델 형식: view, table, incremental 중 선택
      +schema: dwh_northwind   # 모델 스키마: 데이터베이스에서 생성될 스키마 이름
                               # 데이터 웨어하우스의 논리적 구분을 위해 사용
      dim_date:
        +materialized: view    # dim_date 모델은 view로 설정
